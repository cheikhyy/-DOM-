Les méthodes et propriétés importantes :
document.getElementById() : Sélectionne un élément par son ID.
document.querySelector() : Sélectionne un élément avec un sélecteur CSS (par exemple, une classe, un ID, ou un tag).
element.textContent : Modifie le contenu textuel d'un élément.
element.style : Permet de changer les styles CSS d'un élément.


un écouteur d'événements addEventListener() est utilisé pour détecter le clic sur le bouton.



Les événements click, load, focusin, 
et focusout sont des interactions courantes dans le DOM (Document Object Model) 
en JavaScript qui permettent de répondre aux actions de l'utilisateur ou à l'état de certains éléments
 sur une page web. 


Voici les différentes utilisations de ces événements dans un scénario réel :

click : Interagir avec des boutons ou des liens.
load : Assurer que le contenu est entièrement chargé avant de déclencher des actions.
focusin et focusout : Gérer les interactions avec les champs de formulaire pour améliorer l'expérience utilisateur.


Changer le titre avec prompt() :

Lorsque l'utilisateur clique sur le bouton « Changer le titre »,
 une boîte de dialogue prompt() s'affiche, lui demandant d'entrer un nouveau titre.
Si l'utilisateur entre un texte et clique sur "OK",
 le titre de la page est mis à jour avec cette nouvelle valeur.
Si l'utilisateur annule ou laisse le champ vide, une alerte indique que le titre n'a pas été modifié.
Confirmation avec confirm() avant d'ajouter un élément :


Avant d'ajouter un élément à la liste, une boîte de dialogue confirm() 
demande à l'utilisateur de confirmer son action.
Si l'utilisateur clique sur "OK", le nouvel élément est ajouté à la liste.
Si l'utilisateur clique sur "Annuler", une alerte indique que rien n'a été ajout





L'interaction avec l'utilisateur est une partie clé de la manipulation du DOM en JavaScript.
Pour intégrer cette interaction, on peut utiliser des boîtes de dialogue comme alert(), prompt() et confirm(), 
ou bien des événements liés aux actions de l'utilisateur, comme le clic sur un bouton ou la saisie de texte.

Exercice:
créer un formulaire qui utilise un prompt() pour demander un nom, et ajoute ce nom à une liste après confirmation.




focus : Se déclenche lorsqu'un élément (par exemple, un champ de formulaire) reçoit le focus.
blur(flou) : Se déclenche lorsqu'un élément perd le focus.
change : Se déclenche lorsque la valeur d'un élément (comme un champ de saisie) change.
submit : Se déclenche lorsque l'utilisateur soumet un formulaire.






Événements de clavier (KeyboardEvent)
keydown : Se déclenche lorsqu'une touche du clavier est enfoncée.
keypress : Se déclenche lorsqu'une touche est enfoncée et 
envoie un caractère (peut ne pas être pris en charge par tous les navigateurs).
keyup : Se déclenche lorsque l'utilisateur relâche une touche du clavier.




 Événements de souris (MouseEvent)
mousedown : Se déclenche lorsque l'utilisateur appuie sur un bouton de la souris.
mouseup : Se déclenche lorsque l'utilisateur relâche un bouton de la souris.
click : Se déclenche lorsqu'un bouton de la souris est cliqué.
dblclick : Se déclenche lorsque l'utilisateur fait un double-clic.
mousemove : Se déclenche lorsque la souris est déplacée.
mouseover : Se déclenche lorsque la souris passe sur un élément.
mousewheel : Se déclenche lorsque l'utilisateur fait défiler la souris (molette).
mouseout : Se déclenche lorsque la souris quitte un élément.
contextmenu : Se déclenche lorsque l'utilisateur fait un clic droit pour ouvrir le menu contextuel.




La validation de formulaire en HTML et JavaScript est cruciale pour garantir que les données saisies par l'utilisateur sont correctes avant d'être envoyées au serveur. Elle peut être effectuée de deux manières :

Validation côté client (avec HTML et JavaScript).
Validation côté serveur (après soumission).
Voici comment vous pouvez valider un formulaire en HTML et JavaScript.

1. Validation en HTML avec les attributs de formulaire
HTML5 offre plusieurs attributs intégrés qui facilitent la validation de base :

required : Champ obligatoire.
pattern : Utilisé pour valider un champ selon une expression régulière.
min, max, minlength, maxlength : Utilisés pour définir les valeurs minimales et maximales ou la longueur du champ.
type : Définir le type de données (par exemple, email, number).  




Explication de chaque partie
<form> : Le formulaire qui contient les différents champs à remplir.
onsubmit="return validerFormulaire()" : Lors de la soumission du formulaire, la fonction JavaScript validerFormulaire
 est appelée.
 Si elle retourne false, 
le formulaire ne sera pas soumis.

<input type="text"> : Champ de texte pour entrer des informations.
<input type="email"> : Champ de saisie pour un email.
<input type="number"> : Champ pour entrer un nombre avec des restrictions de valeur (min et max).

<span> : Utilisé ici pour afficher les messages d'erreur.
document.getElementById() : JavaScript utilise cette fonction pour accéder aux éléments du DOM (Document Object Model).
if (...) : Vérifie une condition, et si elle est fausse, affiche un message d'erreur et empêche l'envoi du formulaire.






Code Concerné:
const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
1. ^
Signification : Indique le début de la chaîne.
Utilité : Garantit que la correspondance commence dès le premier caractère.


2. [a-zA-Z0-9._-]
Signification : Définit un ensemble de caractères valides qui peuvent apparaître
 dans la partie locale (avant le @) de l'adresse e-mail.
a-z : Lettres minuscules (de a à z).
A-Z : Lettres majuscules (de A à Z).
0-9 : Chiffres (de 0 à 9).
. : Le point (.) est autorisé.
_ : Le souligné (_) est autorisé.
- : Le tiret (-) est autorisé.
+ : Indique qu'il doit y avoir au moins un ou plusieurs de ces caractères.


3. @
Signification : Indique la présence obligatoire du symbole @.
Utilité : Sépare la partie locale de la partie du domaine de l'adresse e-mail.

4. [a-zA-Z0-9.-]
Signification : Définit un ensemble de caractères valides pour la partie du domaine (après le @).
a-z : Lettres minuscules.
A-Z : Lettres majuscules.
0-9 : Chiffres.
. : Le point (.) est autorisé (pour séparer les sous-domaines).
- : Le tiret (-) est autorisé (pour des noms de domaine).
+ : Indique qu'il doit y avoir au moins un ou plusieurs de ces caractères.


5. \.
Signification : Représente un point (.) littéral.
Utilité : Comme le point est un caractère spécial en regex (qui correspond à n'importe quel caractère),
 nous utilisons \ pour échapper le point et indiquer qu'on veut un point réel.


6. [a-zA-Z]
Signification : Définit un ensemble de caractères valides pour la partie de l'extension de domaine.

a-z : Lettres minuscules.
A-Z : Lettres majuscules.
{2,6} : Indique que cette partie doit contenir entre 2 et 6 lettres (exemples : .com, .net, .org).

7. $
Signification : Indique la fin de la chaîne.
Utilité : Garantit que la correspondance se termine au dernier caractère.
Exemple de Correspondance
Voyons quelques exemples d'adresses e-mail qui correspondraient à ce modèle, 
et quelques-unes qui ne le feraient pas :

Correspondent
exemple@gmail.com (valide)
mon.nom@domaine.fr (valide)
utilisateur123@mon-site.com (valide)
Ne correspondent pas
exemple@.com (invalides, point manquant avant com)
@gmail.com (invalides, pas de nom d'utilisateur)
exemple@domaine..com (invalides, deux points consécutifs dans le domaine)
Résumé
L'utilisation d'expressions régulières, comme emailPattern, permet de valider des formats spécifiques, 
garantissant que les utilisateurs saisissent des données conformes aux normes établies.
 Cela est particulièrement utile pour des champs comme les adresses e-mail, où la structure est cruciale


 Conclusion
La validation des formulaires permet de protéger l'intégrité des données 
et d'améliorer l'expérience utilisateur en fournissant des indications immédiates sur les erreurs. 
La combinaison d'HTML5 et de JavaScript offre une validation robuste et personnalisable.




scroll : Se déclenche lorsque l'utilisateur fait défiler la page.
resize : Se déclenche lorsque la fenêtre est redimensionnée.
hashchange : Se déclenche lorsque le fragment de l'URL (après le #) change.
load : Se déclenche lorsque la page et ses ressources (comme les images) sont entièrement chargées.
unload : Se déclenche lorsque l'utilisateur quitte la page (par exemple, lors de la fermeture de l'onglet).